version: '3'

dotenv: ['.env']

env:
  GOFMT: gofumpt

tasks:

  build-machine:
    cmds:
      - go build pkg/machine/*.go

  build-telemetry:
    cmds:
      - go build pkg/telemetry/*.go

  build-debugger:
    cmds:
      - go build -o build/am-dbg tools/am-dbg/*.go

  build:
    cmds:
      - task: build-machine
      - task: build-telemetry
      - task: build-debugger

  release:
    cmds:
      - goreleaser release --clean --skip-publish --skip-validate

  am-dbg:
    silent: false
    cmds:
      - go run ./tools/cmd/am-dbg {{.CLI_ARGS}}

  am-dbg-asset:
    silent: false
    cmds:
      - go run ./tools/cmd/am-dbg
          --import-data assets/am-dbg-sim.gob.br
          --select-machine sim-p0
          --select-transition 20
          {{.CLI_ARGS}}

  am-dbg-ssh:
    silent: false
    desc: Run am-dbg-ssh with sample data on localhost:4444
    cmds:
      - go run ./tools/cmd/am-dbg-ssh \
          --import-data assets/am-dbg-sim.gob.br
          --select-machine sim-p0
          --select-transition 20
          {{.CLI_ARGS}}

  am-dbg-ssh-connect:
    silent: false
    desc: Connect to a running am-dbg-ssh via the local SSH client
    cmds:
      - ssh localhost -p 4444 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no

  am-dbg-import-dump:
    silent: false
    cmds:
      - go run ./tools/cmd/am-dbg
          --import-data am-dbg-dump.gob.br
          {{.CLI_ARGS}}

  am-dbg-dbg:
    cmds:
      - go run ./tools/cmd/am-dbg
          --log-file am-dbg-dbg.log
          --log-level 2
          --listen-on localhost:9913
          --select-connected
          {{.CLI_ARGS}}

  test:
    cmds:
      - task: clean
      - go test ./...

  test-verbose:
    cmds:
      - go test ./... -v

  clean:
    cmds:
      - go clean -testcache

  cloc:
    cmds:
      - printf "\n----- pkg/machine\n\n"
      - gocloc pkg/machine --not-match=_test\.go
      - gocloc pkg/machine/*_test.go

      - printf "\n----- pkg/telemetry\n\n"
      - gocloc pkg/telemetry --not-match=_test\.go
      - gocloc pkg/telemetry/*_test.go

      - printf "\n----- pkg/history\n\n"
      - gocloc pkg/history --not-match=_test\.go
      - gocloc pkg/history/*_test.go

      - printf "\n----- tools/debugger\n\n"
      - gocloc tools/debugger --not-match=_test\.go

      - printf "\n----- tools/generator\n\n"
      - gocloc tools/generator --not-match=_test\.go

      - printf "\n----- examples\n\n"
      - gocloc examples

      - printf "\n----- docs\n\n"
      - gocloc --include-lang=md docs

  format:
    cmds:
      - $GOFMT -w examples/*/*.go
      - $GOFMT -w pkg/**/*.go
      - $GOFMT -w tools/**/*.go
      - goimports -w -local "github.com/pancsta/asyncmachine-go" pkg/**/*.go
      - goimports -w -local "github.com/pancsta/asyncmachine-go" tools/**/*.go

  lint:
    cmds:
      - task: lint-go
      - task: lint-md
      # https://github.com/markdownlint/markdownlint/issues/136
      - |
        if grep -q "]()" docs/*.md; then
          echo "Error: Empty links" >&2
          exit 1
        fi
      - task: check-fmt

  lint-go:
    cmds:
      - golangci-lint run --fix

  lint-md:
    cmds:
      - mdl -g -c config/mdlrc .

  check-fmt:
    silent: false
    cmds:
      - test -z "$($GOFMT -l examples/**/*.go)"
      - test -z "$($GOFMT -l pkg/**/*.go)"
      - test -z "$($GOFMT -l tools/**/*.go)"
      - test -z "$(goimports -l -local "github.com/pancsta/asyncmachine-go" pkg/**/*.go)"
      - test -z "$(goimports -l -local "github.com/pancsta/asyncmachine-go" tools/**/*.go)"

  gen-changelog:
    cmds:
      - github_changelog_generator --token $GITHUB_TOKEN
      - head -n -4 CHANGELOG.md > CHANGELOG-tmp.md
      - mv CHANGELOG-tmp.md CHANGELOG.md

  install-deps:
    cmds:
      - go mod tidy
      - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
      - go install mvdan.cc/gofumpt@latest
      - go install golang.org/x/tools/cmd/goimports@latest
      # TODO switch to nodejs md linter
      - gem install mdl
      - gem install github_changelog_generator
      - pipx install grafanalib

  install-deps-demo:
    cmds:
      - npm install -g terminalizer

  gen-grafana-dashboard:
    desc: Generate Grafana dashboard for provided machine IDs
    dir: scripts
    requires:
      vars: [IDS]
    env:
        IDS: $IDS
    cmds:
      - generate-dashboard --output ../assets/grafana-mach-{{.IDS}}.json mach.dashboard.py

  grafana-dashboard-list-panels:
    desc: List panels and grid positions in a generated dashboard
    requires:
      vars: [IDS]
    cmds:
      - |
        jq '.. | objects | select(has("gridPos")) | {title: .title, gridPos: .gridPos}' assets/grafana-mach-{{.IDS}}.json

  gen-states-file:
    desc: Generate states file for provided state names, eg "task gen-states-file -- Foo,Bar"
    cmds:
      - go run tools/cmd/am-gen/main.go states-file {{.CLI_ARGS}}

  demo-gif:
    cmds:
      - terminalizer render assets/demo.cast.yml -o assets/am-dbg.gif
      - magick assets/am-dbg.gif -layers optimize assets/am-dbg.gif

  demo-gif-quick:
    cmds:
      - terminalizer render assets/demo.cast.yml -o assets/am-dbg.gif -q 30

  demo-record:
    cmds:
      - terminalizer record --config config/terminalizer.yml --commnad task demo-run

  demo-run:
    cmds:
      - go run tools/cmd/am-dbg-ssh/main.go

  demo:
    desc: Create assets/demo.gif using tools/am-dbg-ssh
    cmds:
      - task: demo-record
      - task: demo-gif

  godoc:
    cmds:
      - godoc -http=:6060

  gen-manual-pdf:
    cmds:
      - pandoc -f markdown-implicit_figures docs/manual.md -o assets/manual.pdf
