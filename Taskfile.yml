version: '3'

dotenv: [ '.env' ]

env:
  GOFMT: gofumpt

tasks:

  build:
    ignore_error: true
    cmds:
      - go build ./examples/...
      - go build ./pkg/...
      - go build ./internal/...
      - go build ./tools/...

  release:
    cmd: goreleaser release --clean --skip-publish --skip-validate

  assets:
    cmd: git submodule update --init --recursive

  am-dbg:
    silent: false
    cmds:
      - go run ./tools/cmd/am-dbg --clean-on-connect --max-mem 1000 {{.CLI_ARGS}}

  am-dbg-prof:
    desc: Profile am-dbg
    silent: false
    cmds:
      - go run ./tools/cmd/am-dbg
        --clean-on-connect
        --prof-srv :6060
        {{.CLI_ARGS}}

  am-dbg-prof2:
    desc: Profile and debug am-dbg
    silent: false
    cmds:
      - go run ./tools/cmd/am-dbg
        --clean-on-connect
        --prof-srv :6060
        --am-dbg-addr localhost:9913
        {{.CLI_ARGS}}

  am-dbg-asset:
    desc: Start am-dbg with an asset dump file
    silent: false
    cmds:
      - go run ./tools/cmd/am-dbg
          --import-data assets/asyncmachine-go/am-dbg-exports/pubsub-sim.gob.br
          --select-machine sim-p0
          --select-transition 20
          -l -1
          {{.CLI_ARGS}}

  am-dbg-ssh:
    silent: false
    desc: Run am-dbg-ssh with sample data on localhost:4444
    cmds:
      - go run ./tools/cmd/am-dbg-ssh
          --import-data assets/asyncmachine-go/am-dbg-exports/pubsub-sim.gob.br
          --select-machine sim-p0
          --select-transition 20
          {{.CLI_ARGS}}

  am-dbg-ssh-connect:
    silent: false
    desc: Connect to a running am-dbg-ssh at localhost:4444
    cmds:
      - ssh localhost -p 4444 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no

  am-dbg-dump:
    desc: Start am-dbg with a recent dump file
    silent: false
    cmds:
      - go run ./tools/cmd/am-dbg
          --import-data am-dbg-dump.gob.br
          {{.CLI_ARGS}}

  am-dbg-dbg:
    desc: Start am-dbg on port 9913, so it can debug other instances via --am-dbg-addr
    silent: false
    cmds:
      - go run ./tools/cmd/am-dbg
          --listen-on localhost:9913
          --select-connected
          --log-2-ttl 5m
          {{.CLI_ARGS}}

  am-dbg-dbg-prof:
    desc: Profile am-dbg-dbg
    cmds:
      - go run ./tools/cmd/am-dbg
          --listen-on localhost:9913
          --select-connected
          --log-2-ttl 5m
          --prof-srv :6050
          {{.CLI_ARGS}}

  am-dbg-worker:
    desc: Run am-dbg as an RPC worker, optionally starting the dbg RPC server via -server-addr
    silent: false
    cmds:
      - go run ./internal/testing/cmd/am-dbg-worker
          -server-addr=localhost:53470
          -worker-addr=localhost:53480

  am-dbg-delve:
    silent: false
    env:
      AM_DEBUG: 1
    cmds:
      - dlv debug --headless --listen=:2345 --api-version=2 --accept-multiclient
        ./tools/cmd/am-dbg -- 
          --clean-on-connect 
          {{.CLI_ARGS}}

  test:
    env:
      AM_TEST_RUNNER: 1
    desc: Run all local tests
    cmds:
      - task: clean
      - go test ./... {{.CLI_ARGS}}

  test-path:
    env:
      AM_TEST_RUNNER: 1
    desc: Run tests for a provided path
    cmds:
      - task: clean
      - go test {{.CLI_ARGS}}
      - go test -race {{.CLI_ARGS}}

  test-count:
    cmd: grep -r --include="*_test.go"  "^func Test" ./ | wc -l > tests.txt

  test-count-pkg:
    cmd: grep -r --include="*_test.go"  "^func Test" ./pkg | wc -l > tests-pkg.txt

  test-coverage:
    env:
      AM_TEST_RUNNER: 1
    cmds:
      - task test --  
          -p 1 --parallel 1
          -coverprofile=coverage.txt -covermode=atomic >
            coverage.sum.txt
      - go tool cover -func=coverage.txt | grep total | awk '{print $3}' >
          coverage.sum.txt

  test-coverage-pkg:
    env:
      AM_TEST_RUNNER: 1
    cmds:
      - task: clean
      - go test -p 1 --parallel 1 ./pkg/... 
          -coverprofile=coverage-pkg.txt -covermode=atomic
      - go tool cover -func=coverage-pkg.txt | grep total | awk '{print $3}' >
          coverage-pkg.sum.txt

  test-series:
    env:
      AM_TEST_RUNNER: 1
    desc: Run all local tests in a series
    cmds:
      - task: clean
      - go test -p 1 --parallel 1 ./... {{.CLI_ARGS}}

  test-race:
    env:
      AM_TEST_RUNNER: 1
      AM_DETECT_EVAL: 1
    desc: Run all local tests with -race
    cmds:
      - task: clean
      - go test -v -race ./... {{.CLI_ARGS}}

  test-debugger:
    desc: Run local am-dbg integration tests
    cmds:
      - task: clean
      - go test
        ./tools/debugger/test {{.CLI_ARGS}}

  test-debugger-remote:
    dotenv:
      - config/env/tests-remote.env
    desc: Run remote am-dbg integration tests against a running worker (see task am-dbg-worker)
    cmds:
      - task: clean
      - go test -tags test_worker
          ./tools/debugger/test/remote {{.CLI_ARGS}}

  precommit:
    cmds:
      - task: format
      - .git/hooks/pre-commit

  clean:
    cmd: go clean -testcache

  cloc-go:
    cmd: gocloc --output-type json . |
      jq '.languages[] | select(.name == "Go").code' |
      go run ./scripts/compact_number

  cloc-go-pkg:
    cmd: gocloc --output-type json pkg |
      jq '.languages[] | select(.name == "Go").code' |
      go run ./scripts/compact_number

  cloc:
    cmds:
      - printf "\n----- pkg/machine\n\n"
      - gocloc pkg/machine --not-match=_test\.go
      - gocloc pkg/machine --match=_test\.go

      - printf "\n----- pkg/rpc\n\n"
      - gocloc pkg/rpc --not-match=_test\.go
      - gocloc pkg/rpc --match=_test\.go

      - printf "\n----- pkg/node\n\n"
      - gocloc pkg/node --not-match=_test\.go
      - gocloc pkg/node --match=_test\.go

      - printf "\n----- pkg/telemetry\n\n"
      - gocloc pkg/telemetry --not-match=_test\.go
      - gocloc pkg/telemetry --match=_test\.go

      - printf "\n----- pkg/history\n\n"
      - gocloc pkg/history --not-match=_test\.go
      - gocloc pkg/history --match=_test\.go

      - printf "\n----- tools/debugger\n\n"
      - gocloc tools/debugger --not-match=_test\.go
      - gocloc tools/debugger --match=_test\.go

      - printf "\n----- tools/generator\n\n"
      - gocloc tools/generator --not-match=_test\.go

      - printf "\n----- examples\n\n"
      - gocloc examples

      - printf "\n----- docs\n\n"
      - gocloc --include-lang=md docs

  format:
    cmds:
      - $GOFMT -w examples/*/*.go
      - $GOFMT -w pkg/**/*.go
      - $GOFMT -w tools/**/*.go
      - goimports -w -local "github.com/pancsta/asyncmachine-go" pkg/**/*.go
      - goimports -w -local "github.com/pancsta/asyncmachine-go" tools/**/*.go

  lint:
    cmds:
      - task: lint-go
      - task: lint-md
      # https://github.com/markdownlint/markdownlint/issues/136
      - |
        if grep -q "]()" docs/*.md; then
          echo "Error: Empty links" >&2
          exit 1
        fi
      - task: check-fmt

  lint-go:
    cmds:
      - $(go env GOPATH)/bin/golangci-lint run --fix --timeout 5m

  lint-md:
    cmds:
      - mdl -g -c config/mdlrc .

  check-fmt:
    silent: false
    cmds:
      - test -z "$($GOFMT -l examples/**/*.go)"
      - test -z "$($GOFMT -l pkg/**/*.go)"
      - test -z "$($GOFMT -l tools/**/*.go)"
      - test -z "$(goimports -l -local "github.com/pancsta/asyncmachine-go" pkg/**/*.go)"
      - test -z "$(goimports -l -local "github.com/pancsta/asyncmachine-go" tools/**/*.go)"

  gen-changelog:
    cmds:
      - gem install github_changelog_generator
      - github_changelog_generator --token $GITHUB_TOKEN
      - head -n -4 CHANGELOG.md > CHANGELOG-tmp.md
      - mv CHANGELOG-tmp.md CHANGELOG.md

  install-deps:
    cmds:
      - go mod tidy
      - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.64.5
      - go install mvdan.cc/gofumpt@latest
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install github.com/mattn/goreman@latest
      - go install github.com/itchyny/gojq/cmd/gojq@latest
      # TODO switch to nodejs md linter
      - gem install mdl
      - go install github.com/hhatto/gocloc/cmd/gocloc@latest

  install-deps-video:
    cmds:
      - npm install -g terminalizer

  am-gen-states:
    desc: Generate a states file in ROOT DIR for provided state names, eg "task am-gen-states -- -s Foo,Bar -n MyMach"
    cmds:
      - go run ./tools/cmd/am-gen states-file {{.CLI_ARGS}}

  am-gen-grafana:
    desc: Generate a Grafana dashboard, eg "task am-gen-grafana -- --ids mymach,rm-mymach --name mymach --source my-service"
    cmds:
      - go run ./tools/cmd/am-gen grafana {{.CLI_ARGS}}

  video-gif:
    env:
      DISPLAY: :0
    cmds:
      - terminalizer render assets/asyncmachine-go/video.cast.yml -o assets/asyncmachine-go/video.gif
      - convert assets/asyncmachine-go/video.gif -delete 0 assets/asyncmachine-go/video.gif
      - magick assets/asyncmachine-go/video.gif -layers optimize assets/asyncmachine-go/video.gif

  video-gif-quick:
    desc: Render a low quality video gif
    env:
      DISPLAY: :0
    cmds:
      - terminalizer render assets/asyncmachine-go/video.cast.yml -o assets/asyncmachine-go/video.gif -q 15
      - convert assets/asyncmachine-go/video.gif -delete 0 assets/asyncmachine-go/video.gif

  video:
    desc: Record a video
    cmds:
      - terminalizer record
        --config config/terminalizer.yml assets/asyncmachine-go/video.cast
        --skip-sharing
      # delete first 1 record (each has 2 lines)
      - sed -i '/^records:/{n;N;d;}' assets/asyncmachine-go/video.cast.yml

  video-run:
    cmds:
      - go run ./internal/cmd/am-dbg-video

  video-all:
    desc: Create assets/asyncmachine-go/video.gif using internal/cmd/video
    cmds:
      - task: video
      - task: video-gif

  godoc:
    cmds:
      - godoc -http=:6060

  gen-manual-pdf:
    cmds:
      - pandoc -f markdown-implicit_figures docs/manual.md -o assets/asyncmachine-go/manual.pdf

  prof-cpu-img:
    cmds:
      - go tool pprof -png cpu.prof > cpu.light.png
      - magick cpu.light.png
        -channel RGB -negate cpu.dark.png

  prof-mem-img:
    cmds:
      - go tool pprof -png mem.prof > mem.light.png
      - magick mem.light.png
          -channel RGB -negate mem.dark.png

  prof-cpu:
    requires:
      vars: [ SEC ]
    cmds:
      - curl -s http://localhost:6060/debug/pprof/profile?seconds={{.SEC}} > cpu.prof
      - task: prof-cpu-img

  prof-mem:
    cmds:
      - curl -s http://localhost:6060/debug/pprof/heap > mem.prof
      - task: prof-mem-img

  prof-mem-srv:
    cmds:
      - task: prof-mem
      - go tool pprof -http :9999 -edgefraction 0 -nodefraction 0 -nodecount 100000 mem.prof

  prof-trace:
    requires:
      vars: [ SEC ]
    cmds:
      - curl -s http://localhost:6060/debug/pprof/trace?seconds={{.SEC}} > trace.out
      - go tool trace -http=:42419 trace.out

  benchmark-grpc-build:
    dir: examples/benchmark_grpc
    cmd: protoc --go_out=. --go_opt=paths=source_relative
           --go-grpc_out=. --go-grpc_opt=paths=source_relative
           proto/worker.proto

  benchmark-grpc:
    dir: examples/benchmark_grpc
    cmds:
      - echo "Running 10_000 server events"
      - go test -bench=. -benchtime=10000x -v

  website:
    dir: website
    cmd: npm run preview

  website-build:
    dir: website
    cmd: npm run build

  website-serve:
    dir: website
    cmds:
      - task: website-build
      - cd build && simple-http-server -p 5000 -i

  web-metrics:
    cmds:
      - docker-compose -f deploy/web-metrics/docker-compose.yml up -d --force-recreate
      - |
        echo Grafana: http://localhost:3000
        echo Jaeger: http://localhost:16686

  web-metrics-clean:
    cmd: docker-compose -f deploy/web-metrics/docker-compose.yml down -v

  gen-grafana-tree-state-source:
    cmd: ./examples/tree_state_source/gen-grafana.sh

  gen-diagram-svgs-deps:
    cmd: npm install -g @mermaid-js/mermaid-cli

  gen-diagram-svgs:
    env:
      # 1-based indexes of diagrams to make SVGs of
      NUMS: 1 2 3 4 5 6 7
      DIR: assets/asyncmachine-go/diagrams
    cmds:
      - go run ./scripts/extract_mermaid docs/diagrams.md "$NUMS"
      - | 
        for N in $NUMS; do
          mmdc -i diagram_$N.mmd -o $DIR/diagram_$N.svg -w 800 -b transparent -t dark
          rm diagram_$N.mmd
        done

  arpc:
    desc: Start an aRPC REPL
    cmd: go run ./tools/cmd/arpc
        {{.CLI_ARGS}}

  am-dbg-dashboard:
    desc: Start an example am-dbg dashboard
    cmd: zellij --layout ./config/dashboards/2x1x1.kdl
