flowchart LR
    subgraph Legend
        leg-State([State])
        leg-HandlerOrMethod["HandlerOrMethod()"]

        subgraph LegendAdd [State A adds state B]
            leg-A1([A]) -- Add --> leg-B1([B])
        end

        subgraph LegendCall [Method call]
            leg-HandlerOrMethod21(["HandlerOrMethod1()"]) -. call .-> leg-MethodName22["HandlerOrMethod2()"]
        end

        subgraph LegendHandle [State handler]
            leg-A3([A]) == handle ==> leg-HandlerOrMethod3["AState()"]
        end
    end

%% RPC

    subgraph RPC Getter
        direction TB

        subgraph ClientHost [Client Host]
            subgraph Consumer
                con-MethodOrHandler["MethodOrHandler()"]
                con-WorkerDelibered["WorkerDelivered(payload)"]
            end

            subgraph RemoteWorkerMach [Remote Worker Mach]
            %% Provide Worker is requested to provide some (named) data.
                rw-Provide([Provide])
            end

            subgraph RPCClientMach [RPC Client Mach]
                c-WorkerDelivered([WorkerDelivered])
                c-RemoteSendPayload["RemoteSendPayload()"]
                c-WorkerDeliveredState["WorkerDeliveredState()"]
            end
        end

        subgraph ServerHost [Server Host]
            subgraph RPCServer [RPC Server]
                s-SendPayload["SendPayload()"]
                s-DeliveredState["DeliveredState()"]
            end

            subgraph WorkerMach [Worker Mach]
            %% Provide Worker is requested to provide some (named) data.
                w-Provide([Provide])
            %% Delivering Worker has started send data to the client.
                w-Delivering([Delivering])
                w-Delivered([Delivered])
            %% Delivered Worker has completed sending data to the client.
                w-ProvideState["ProvideState()"]
                w-DeliveringState["DeliveringState()"]
            end
        end

    %% steps
        con-MethodOrHandler -- Add --> rw-Provide
        rw-Provide -- Add --> w-Provide
        w-Provide == handle ==> w-ProvideState
        w-ProvideState -- Add --> w-Delivering
        w-Delivering == handle ==> w-DeliveringState
        w-DeliveringState -- Add --> w-Delivered
        w-Delivered == handle ==> s-DeliveredState
        s-DeliveredState -. call .-> s-SendPayload -. call .-> c-RemoteSendPayload
        c-RemoteSendPayload -- Add --> c-WorkerDelivered
        c-WorkerDelivered == handle ==> c-WorkerDeliveredState
        c-WorkerDeliveredState -. call .-> con-WorkerDelibered
    end